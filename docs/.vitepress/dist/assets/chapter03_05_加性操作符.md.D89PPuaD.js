import{_ as n,c as t,o as l,ag as e}from"./chunks/framework.DPDPlp3K.js";const d=JSON.parse('{"title":"加性操作符","description":"","frontmatter":{},"headers":[],"relativePath":"chapter03/05/加性操作符.md","filePath":"chapter03/05/加性操作符.md","lastUpdated":null}'),a={name:"chapter03/05/加性操作符.md"};function r(o,i,f,s,_,u){return l(),t("div",null,i[0]||(i[0]=[e('<h1 id="加性操作符" tabindex="-1">加性操作符 <a class="header-anchor" href="#加性操作符" aria-label="Permalink to &quot;加性操作符&quot;">​</a></h1><p><strong><em>加法</em></strong></p><p>加法操作符规则：</p><ul><li>如果有一个操作数是NaN，则结果是NaN</li><li>如果是Infinity 加Infinity，则结果是Infinity</li><li>如果是-Infinity 加-Infinity，则结果是-Infinity</li><li><strong>如果是Infinity 加-Infinity，则结果是NaN</strong></li><li>如果两个操作数都是字符串，则将第二个操作数与第一个操作数拼接起来</li><li>如果只有一个操作数是字符串，则将另一个操作数转换为字符串，然后再将两个字符串拼接起来</li><li>如果有一个操作数是对象、数值或布尔值，则调用它们的toString()方法取得相应的字符串值，然后再应用前面关于字符串的规则</li><li>对于undefined 和null，则分别调用String()函数并取得字符串&quot;undefined&quot;和&quot;null&quot;</li></ul><p><strong><em>减法</em></strong></p><p>减法操作符规则：</p><ul><li>如果两个操作符都是数值，则执行常规的算术减法操作并返回结果</li><li>如果有一个操作数是NaN，则结果是NaN</li><li>如果是Infinity 减Infinity，则结果是NaN</li><li>如果是-Infinity 减-Infinity，则结果是NaN</li><li>如果是Infinity 减-Infinity，则结果是Infinity</li><li>如果是-Infinity 减Infinity，则结果是-Infinity</li><li>如果有一个操作数是字符串、布尔值、null 或undefined，则先在后台调用Number()函数将其转换为数值，然后再根据前面的规则执行减法计算</li><li>如果有一个操作数是对象，则调用对象的valueOf()方法以取得表示该对象的数值</li></ul>',7)]))}const I=n(a,[["render",r]]);export{d as __pageData,I as default};
