import{_ as r,c as n,o as l,j as e,a}from"./chunks/framework.DPDPlp3K.js";const f=JSON.parse('{"title":"管理内存","description":"","frontmatter":{},"headers":[],"relativePath":"chapter04/03/管理内存.md","filePath":"chapter04/03/管理内存.md","lastUpdated":null}'),s={name:"chapter04/03/管理内存.md"};function o(c,t,p,d,i,_){return l(),n("div",null,t[0]||(t[0]=[e("h1",{id:"管理内存",tabindex:"-1"},[a("管理内存 "),e("a",{class:"header-anchor",href:"#管理内存","aria-label":'Permalink to "管理内存"'},"​")],-1),e("p",null,"使用具备垃圾收集机制的语言编写程序，开发人员一般不必操心内存管理的问题。但是，JavaScript在进行内存管理及垃圾收集时面临的问题还是有点与众不同。",-1),e("p",null,"确保占用最少的内存可以让页面获得更好的性能。而优化内存占用的最佳方式，就是为执行中的代码只保存必要的数据。",-1),e("p",null,[a("一旦数据不再有用，最好通过将其值设置为null 来释放其引用——这个做法叫做"),e("strong",null,"解除引用"),a("（dereferencing）。")],-1),e("p",null,"不过，解除一个值的引用并不意味着自动回收该值所占用的内存。解除引用的真正作用是让值脱离执行环境，以便垃圾收集器下次运行时将其回收。",-1)]))}const m=r(s,[["render",o]]);export{f as __pageData,m as default};
