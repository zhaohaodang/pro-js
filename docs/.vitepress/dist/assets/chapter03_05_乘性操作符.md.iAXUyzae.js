import{_ as a,c as l,o as t,ag as n}from"./chunks/framework.DPDPlp3K.js";const h=JSON.parse('{"title":"乘性操作符","description":"","frontmatter":{},"headers":[],"relativePath":"chapter03/05/乘性操作符.md","filePath":"chapter03/05/乘性操作符.md","lastUpdated":null}'),e={name:"chapter03/05/乘性操作符.md"};function r(o,i,s,N,f,_){return t(),l("div",null,i[0]||(i[0]=[n('<h1 id="乘性操作符" tabindex="-1">乘性操作符 <a class="header-anchor" href="#乘性操作符" aria-label="Permalink to &quot;乘性操作符&quot;">​</a></h1><h2 id="乘法" tabindex="-1">乘法 <a class="header-anchor" href="#乘法" aria-label="Permalink to &quot;乘法&quot;">​</a></h2><p>乘法操作符遵循下列特殊的规则：</p><ul><li>如果操作数都是数值，执行常规的乘法计算</li><li>如果有一个操作数是NaN，则结果是NaN</li><li>如果有一个操作数是NaN，则结果是NaN</li><li>如果是Infinity 与非0 数值相乘，则结果是Infinity 或-Infinity，取决于有符号操作数的符号</li><li>如果是Infinity 与Infinity 相乘，则结果是Infinity</li><li>如果有一个操作数不是数值，则在后台调用Number()将其转换为数值，然后再应用上面的规则</li></ul><h2 id="除法" tabindex="-1">除法 <a class="header-anchor" href="#除法" aria-label="Permalink to &quot;除法&quot;">​</a></h2><p>除法操作符对特殊的值也有特殊的处理规则：</p><ul><li>如果操作数都是数值，执行常规的除法计算</li><li>如果有一个操作数是NaN，则结果是NaN</li><li><strong>如果是Infinity 被Infinity 除，则结果是NaN</strong></li><li><strong>如果是零被零除，则结果是NaN</strong></li><li><strong>如果是非零的有限数被零除，则结果是Infinity 或-Infinity，取决于有符号操作数的符号</strong></li><li>如果是Infinity 被任何非零数值除，则结果是Infinity 或-Infinity，取决于有符号操作数的符号</li><li>如果有一个操作数不是数值，则在后台调用Number()将其转换为数值，再应用上面的规则</li></ul><h2 id="求模" tabindex="-1">求模 <a class="header-anchor" href="#求模" aria-label="Permalink to &quot;求模&quot;">​</a></h2><p>求模操作符会遵循下列特殊规则来处理特殊的值：</p><ul><li>如果操作数都是数值，执行常规的除法计算，返回除得的余数</li><li>如果被除数是无穷大值而除数是有限大的数值，则结果是NaN</li><li>如果被除数是有限大的数值而除数是零，则结果是NaN</li><li>如果是Infinity 被Infinity 除，则结果是NaN</li><li>如果被除数是有限大的数值而除数是无穷大的数值，则结果是被除数</li><li>如果有一个操作数不是数值，则在后台调用Number()将其转换为数值，然后再应用上面的规则</li></ul>',10)]))}const c=a(e,[["render",r]]);export{h as __pageData,c as default};
