import{_ as t,c as a,o as l,ag as r}from"./chunks/framework.DPDPlp3K.js";const u=JSON.parse('{"title":"相等操作符","description":"","frontmatter":{},"headers":[],"relativePath":"chapter03/05/相等操作符.md","filePath":"chapter03/05/相等操作符.md","lastUpdated":null}'),n={name:"chapter03/05/相等操作符.md"};function i(s,e,o,p,_,d){return l(),a("div",null,e[0]||(e[0]=[r('<h1 id="相等操作符" tabindex="-1">相等操作符 <a class="header-anchor" href="#相等操作符" aria-label="Permalink to &quot;相等操作符&quot;">​</a></h1><p><strong><em>相等和不相等</em></strong></p><p>这两个操作符都会先转换操作数（通常称为强制转型），然后再比较它们的相等性</p><p>在转换不同的数据类型时，相等和不相等操作符遵循下列基本规则：</p><ul><li>如果有一个操作数是布尔值，则在比较相等性之前先将其转换为数值——false 转换为0，而true 转换为1</li><li>如果一个操作数是字符串，另一个操作数是数值，在比较相等性之前先将字符串转换为数值</li><li>如果一个操作数是对象，另一个操作数不是，则调用对象的valueOf()方法，用得到的基本类型值按照前面的规则进行比</li><li><strong>null 和undefined 是相等的</strong></li><li>要比较相等性之前，不能将null 和undefined 转换成其他任何值</li><li>如果有一个操作数是NaN，则相等操作符返回false，而不相等操作符返回true</li><li>如果两个操作数都是对象，则比较它们是不是同一个对象。如果两个操作数都指向同一个对象，则相等操作符返回true；否则，返回false</li></ul><p><strong><em>全等和不全等</em></strong></p><p>全等和不全等在比较之前，不对操作数进行强制转型</p><p>由于相等和不相等操作符存在类型转换问题，而为了保持代码中数据类型的完整性，我们推荐使用全等和不全等操作符</p>',8)]))}const f=t(n,[["render",i]]);export{u as __pageData,f as default};
