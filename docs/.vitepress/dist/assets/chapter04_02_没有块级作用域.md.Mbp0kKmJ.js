import{_ as a,c as i,o as t,ag as p}from"./chunks/framework.DPDPlp3K.js";const d=JSON.parse('{"title":"没有块级作用域","description":"","frontmatter":{},"headers":[],"relativePath":"chapter04/02/没有块级作用域.md","filePath":"chapter04/02/没有块级作用域.md","lastUpdated":null}'),e={name:"chapter04/02/没有块级作用域.md"};function n(l,s,r,h,o,k){return t(),i("div",null,s[0]||(s[0]=[p(`<h1 id="没有块级作用域" tabindex="-1">没有块级作用域 <a class="header-anchor" href="#没有块级作用域" aria-label="Permalink to &quot;没有块级作用域&quot;">​</a></h1><p>在其他类C 的语言中，由花括号封闭的代码块都有自己的作用域。</p><p>在ES6之前，JavaScript 没有块级作用域经常会导致理解上的困惑。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> color </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;blue&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(color); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//&quot;blue&quot;</span></span></code></pre></div><p>这里是在一个if 语句中定义了变量color。如果是在C、C++或Java 中，color 会在if 语句执行完毕后被销毁。但在JavaScript 中，if 语句中的变量声明会将变量添加到当前的执行环境（在这里是全局环境）中。</p><p><strong><em>声明变量</em></strong></p><p>使用var 声明的变量会自动被添加到最接近的环境中。在函数内部，最接近的环境就是函数的局部环境；在with 语句中，最接近的环境是函数环境。如果初始化变量时没有使用var 声明，该变量会自动被添加到全局环境。</p><p><strong><em>查询标识符</em></strong></p><p>当在某个环境中为了读取或写入而引用一个标识符时，必须通过搜索来确定该标识符实际代表什么。搜索过程从作用域链的前端开始，向上逐级查询与给定名字匹配的标识符。</p><p>如果在局部环境中找到了该标识符，搜索过程停止，变量就绪。</p><p>如果在局部环境中没有找到该变量名，则继续沿作用域链向上搜索。搜索过程将一直追溯到全局环境的变量对象。</p><p>如果在全局环境中也没有找到这个标识符，则意味着该变量尚未声明。</p><p>变量查询也不是没有代价的。很明显，访问局部变量要比访问全局变量更快，因为不用向上搜索作用域链。</p><p>JavaScript 引擎在优化标识符查询方面做得不错，因此这个差别在将来恐怕就可以忽略不计了。</p>`,14)]))}const E=a(e,[["render",n]]);export{d as __pageData,E as default};
