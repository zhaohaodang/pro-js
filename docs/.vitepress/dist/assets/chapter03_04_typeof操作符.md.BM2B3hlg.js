import{_ as i,c as t,o as a,ag as e}from"./chunks/framework.DPDPlp3K.js";const u=JSON.parse('{"title":"typeof操作符","description":"","frontmatter":{},"headers":[],"relativePath":"chapter03/04/typeof操作符.md","filePath":"chapter03/04/typeof操作符.md","lastUpdated":null}'),n={name:"chapter03/04/typeof操作符.md"};function p(l,s,h,o,k,r){return a(),t("div",null,s[0]||(s[0]=[e(`<h1 id="typeof操作符" tabindex="-1">typeof操作符 <a class="header-anchor" href="#typeof操作符" aria-label="Permalink to &quot;typeof操作符&quot;">​</a></h1><p>检测给定变量的<strong>数据类型</strong>——typeof</p><p>对一个值使用typeof 操作符可能返回下列某个<strong>字符串</strong>：</p><ul><li>&quot;undefined&quot;——如果这个值未定义</li><li>&quot;boolean&quot;——如果这个值是布尔值</li><li>&quot;string&quot;——如果这个值是字符串</li><li>&quot;number&quot;——如果这个值是数值</li><li>&quot;object&quot;——如果这个值是对象或null</li><li>&quot;function&quot;——如果这个值是函数</li></ul><p>例子：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;some string&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> message); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;string&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> message); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;string&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 95</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;number&quot;</span></span></code></pre></div><blockquote><p>typeof 是一个操作符而不是函数，因此例子中的圆括号尽管可以使用，但不是必需的</p></blockquote>`,7)]))}const g=i(n,[["render",p]]);export{u as __pageData,g as default};
