import{_ as e,c as a,o as r,ag as n}from"./chunks/framework.DPDPlp3K.js";const l=JSON.parse('{"title":"用户代理检测","description":"","frontmatter":{},"headers":[],"relativePath":"chapter09/03/user-agent-detection.md","filePath":"chapter09/03/user-agent-detection.md","lastUpdated":null}'),o={name:"chapter09/03/user-agent-detection.md"};function s(c,t,i,p,_,d){return r(),a("div",null,t[0]||(t[0]=[n('<h1 id="用户代理检测" tabindex="-1">用户代理检测 <a class="header-anchor" href="#用户代理检测" aria-label="Permalink to &quot;用户代理检测&quot;">​</a></h1><p>第三种，也是争议最大的一种客户端检测技术叫做<strong>用户代理检测</strong>。用户代理检测通过检测用户代理字符串来确定实际使用的浏览器。在每一次 HTTP 请求过程中，用户代理字符串是作为<strong>响应首部</strong>发送的，而且该字符串可以通过 JavaScript 的 navigator.userAgent 属性访问。</p><p>提到与用户代理字符串有关的争议，就不得不提到<strong>电子欺骗</strong>（spoofing）。所谓电子欺骗，就是指浏览器通过在自己的用户代理字符串加入一些错误或误导性信息，来达到<strong>欺骗服务器</strong>的目的。要弄清楚这个问题的来龙去脉，必须从 Web 问世初期用户代理字符串的发展讲起。</p>',3)]))}const u=e(o,[["render",s]]);export{l as __pageData,u as default};
