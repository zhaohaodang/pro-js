import{_ as t,c as r,o as n,j as e,a as o}from"./chunks/framework.DPDPlp3K.js";const m=JSON.parse('{"title":"引用计数","description":"","frontmatter":{},"headers":[],"relativePath":"chapter04/03/引用计数.md","filePath":"chapter04/03/引用计数.md","lastUpdated":null}'),s={name:"chapter04/03/引用计数.md"};function c(l,a,d,p,i,_){return n(),r("div",null,a[0]||(a[0]=[e("h1",{id:"引用计数",tabindex:"-1"},[o("引用计数 "),e("a",{class:"header-anchor",href:"#引用计数","aria-label":'Permalink to "引用计数"'},"​")],-1),e("p",null,"另一种不太常见的垃圾收集策略叫做引用计数（reference counting）",-1),e("p",null,"引用计数的含义是跟踪记录每个值被引用的次数。当声明了一个变量并将一个引用类型值赋给该变量时，则这个值的引用次数就是1。如果同一个值又被赋给另一个变量，则该值的引用次数加1。相反，如果包含对这个值引用的变量又取得了另外一个值，则这个值的引用次数减1。当这个值的引用次数变成0 时，则说明没有办法再访问这个值了，因而就可以将其占用的内存空间回收回来。这样，当垃圾收集器下次再运行时，它就会释放那些引用次数为零的值所占用的内存。",-1)]))}const h=t(s,[["render",c]]);export{m as __pageData,h as default};
