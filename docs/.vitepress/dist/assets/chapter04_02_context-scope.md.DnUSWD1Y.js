import{_ as e,c as a,o,ag as r}from"./chunks/framework.DPDPlp3K.js";const d=JSON.parse('{"title":"执行环境及作用域","description":"","frontmatter":{},"headers":[],"relativePath":"chapter04/02/context-scope.md","filePath":"chapter04/02/context-scope.md","lastUpdated":null}'),n={name:"chapter04/02/context-scope.md"};function c(p,t,s,i,_,l){return o(),a("div",null,t[0]||(t[0]=[r('<h1 id="执行环境及作用域" tabindex="-1">执行环境及作用域 <a class="header-anchor" href="#执行环境及作用域" aria-label="Permalink to &quot;执行环境及作用域&quot;">​</a></h1><p><strong>执行环境</strong>（execution context，为简单起见，有时也称为“环境”）是JavaScript 中最为重要的一个概念。执行环境定义了变量或函数有权访问的其他数据，决定了它们各自的行为。</p><p>每个执行环境都有一个与之关联的<strong>变量对象</strong>（variable object），环境中定义的所有变量和函数都保存在这个对象中。</p><p>每个函数都有自己的执行环境。当执行流进入一个函数时，函数的环境就会被推入一个环境栈中。而在函数执行之后，栈将其环境弹出，把控制权返回给之前的执行环境。ECMAScript 程序中的执行流正是由这个方便的机制控制着。</p><p>当代码在一个环境中执行时，会创建变量对象的一个<strong>作用域链</strong>（scope chain）。作用域链的用途，是保证对执行环境有权访问的所有变量和函数的有序访问。作用域链的<em>前端</em>，始终都是当前执行的代码所在环境的变量对象。如果这个环境是函数，则将其<strong>活动对象</strong>（activation object）作为变量对象。活动对象在最开始时只包含一个变量，即arguments 对象（这个对象在全局环境中是不存在的）。作用域链中的下一个变量对象来自包含（外部）环境，而再下一个变量对象则来自下一个包含环境。这样，一直延续到全局执行环境；全局执行环境的变量对象始终都是作用域链中的最后一个对象。</p><p>标识符解析是沿着作用域链一级一级地搜索标识符的过程。搜索过程始终从作用域链的<em>前端</em>开始，然后逐级地向后回溯，直至找到标识符为止（如果找不到标识符，通常会导致错误发生）。</p><p><a href="http://www.runoob.com/js/js-scope.html" target="_blank" rel="noreferrer">点我查看示例，理解作用域</a></p>',7)]))}const h=e(n,[["render",c]]);export{d as __pageData,h as default};
