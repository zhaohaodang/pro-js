import{_ as i,c as a,o as t,ag as n}from"./chunks/framework.DPDPlp3K.js";const d=JSON.parse('{"title":"位置操作","description":"","frontmatter":{},"headers":[],"relativePath":"chapter08/02/位置操作.md","filePath":"chapter08/02/位置操作.md","lastUpdated":null}'),p={name:"chapter08/02/位置操作.md"};function h(l,s,e,k,o,r){return t(),a("div",null,s[0]||(s[0]=[n(`<h1 id="位置操作" tabindex="-1">位置操作 <a class="header-anchor" href="#位置操作" aria-label="Permalink to &quot;位置操作&quot;">​</a></h1><p>使用 location 对象可以通过很多方式来改变浏览器的位置。</p><p>使用assign() 方法并为其传递一个 URL，就可以立即打开新 URL 并在浏览器的历史记录中生成一条记录。如果是将 location.href或 window.location 设置为一个 URL 值，也会以该值调用 assign() 方法。</p><p>另外，修改 location 对象的其他属性可以改变当前加载的页面。下面的例子展示了通过将 hash 、search 、 hostname 、 pathname 和 port 属性设置为新值来改变 URL。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//假设初始 URL 为 http://www.wrox.com/WileyCDA/</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//将 URL 修改为&quot;http://www.wrox.com/WileyCDA/#section1&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">location.hash </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;#section1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//将 URL 修改为&quot;http://www.wrox.com/WileyCDA/?q=javascript&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">location.search </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;?q=javascript&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//将 URL 修改为&quot;http://www.yahoo.com/WileyCDA/&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">location.hostname </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;www.yahoo.com&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//将 URL 修改为&quot;http://www.yahoo.com/mydir/&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">location.pathname </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;mydir&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//将 URL 修改为&quot;http://www.yahoo.com:8080/WileyCDA/&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">location.port </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8080</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><blockquote><p>每次修改 location 的属性（ hash 除外），页面都会以新 URL 重新加载</p></blockquote><p>当通过上述任何一种方式修改 URL 之后，浏览器的历史记录中就会生成一条新记录，因此用户通过单击“后退”按钮都会导航到前一个页面。</p><p>要禁用这种行为，可以使用 replace() 方法。这个方法只接受一个参数，即要导航到的 URL，不会在历史记录中生成新记录。</p><p>与位置有关的最后一个方法是 reload() ，作用是重新加载当前显示的页面。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">location.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">reload</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//重新加载（有可能从缓存中加载）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">location.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">reload</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//重新加载（从服务器重新加载）</span></span></code></pre></div><p>**位于 reload() 调用之后的代码可能会也可能不会执行，这要取决于网络延迟或系统资源等因素。**为此，最好将 reload() 放在代码的最后一行。</p>`,11)]))}const E=i(p,[["render",h]]);export{d as __pageData,E as default};
