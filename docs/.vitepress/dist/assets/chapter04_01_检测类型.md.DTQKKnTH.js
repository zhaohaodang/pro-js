import{_ as a,c as i,o as t,ag as e}from"./chunks/framework.DPDPlp3K.js";const d=JSON.parse('{"title":"检测类型","description":"","frontmatter":{},"headers":[],"relativePath":"chapter04/01/检测类型.md","filePath":"chapter04/01/检测类型.md","lastUpdated":null}'),n={name:"chapter04/01/检测类型.md"};function p(l,s,r,h,k,o){return t(),i("div",null,s[0]||(s[0]=[e(`<h1 id="检测类型" tabindex="-1">检测类型 <a class="header-anchor" href="#检测类型" aria-label="Permalink to &quot;检测类型&quot;">​</a></h1><p>为了知道变量是什么类型的对象，ECMAScript提供了instanceof 操作符，其语法如下所示：</p><p><code>result = variable instanceof constructor</code></p><p>如果变量是给定引用类型（根据它的原型链来识别；第6 章将介绍原型链）的实例，那么instanceof 操作符就会返回true。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(person </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">instanceof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 变量person 是Object 吗？</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(colors </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">instanceof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 变量colors 是Array 吗？</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pattern </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">instanceof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RegExp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 变量pattern 是RegExp 吗？</span></span></code></pre></div><p>根据规定，<strong>所有引用类型的值都是Object 的实例</strong>。因此，在检测一个引用类型值和Object 构造函数时，instanceof 操作符始终会返回true。当然，如果使用instanceof 操作符检测基本类型的值，则该操作符始终会返回false，因为<strong>基本类型不是对象</strong>。</p>`,6)]))}const g=a(n,[["render",p]]);export{d as __pageData,g as default};
