import{_ as i,c as a,o as e,ag as n}from"./chunks/framework.DPDPlp3K.js";const c=JSON.parse('{"title":"Undefined类型","description":"","frontmatter":{},"headers":[],"relativePath":"chapter03/04/Undefined类型.md","filePath":"chapter03/04/Undefined类型.md","lastUpdated":null}'),t={name:"chapter03/04/Undefined类型.md"};function p(l,s,d,h,k,r){return e(),a("div",null,s[0]||(s[0]=[n(`<h1 id="undefined类型" tabindex="-1">Undefined类型 <a class="header-anchor" href="#undefined类型" aria-label="Permalink to &quot;Undefined类型&quot;">​</a></h1><p>Undefined 类型只有一个值，即特殊的undefined</p><p>在使用var 声明变量但未对其加以初始化时，这个变量的值就是undefined</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> message;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//true</span></span></code></pre></div><p>对未初始化的变量执行typeof 操作符会返回undefined 值，而对未声明的变量执行typeof 操作符同样也会返回undefined 值。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> message; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 这个变量声明之后默认取得了undefined 值</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 下面这个变量并没有声明</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// var age</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> message); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;undefined&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;undefined&quot;</span></span></code></pre></div>`,6)]))}const g=i(t,[["render",p]]);export{c as __pageData,g as default};
