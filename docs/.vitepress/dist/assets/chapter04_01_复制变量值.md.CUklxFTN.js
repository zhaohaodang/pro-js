import{_ as i,c as a,o as t,ag as n}from"./chunks/framework.DPDPlp3K.js";const c=JSON.parse('{"title":"复制变量值","description":"","frontmatter":{},"headers":[],"relativePath":"chapter04/01/复制变量值.md","filePath":"chapter04/01/复制变量值.md","lastUpdated":null}'),p={name:"chapter04/01/复制变量值.md"};function e(h,s,l,k,r,d){return t(),a("div",null,s[0]||(s[0]=[n(`<h1 id="复制变量值" tabindex="-1">复制变量值 <a class="header-anchor" href="#复制变量值" aria-label="Permalink to &quot;复制变量值&quot;">​</a></h1><p>基本类型的复制：会在变量对象上创建一个新值，然后把该值复制到为新变量分配的位置上：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num1;</span></span></code></pre></div><p>在此，num1 中保存的值是5。当使用num1 的值来初始化num2 时，num2 中也保存了值5。但num2中的5 与num1 中的5 是完全独立的，该值只是num1 中5 的一个副本。</p><p><img src="https://sinacloud.net/pro-js/copy-base.jpg" alt=""></p><p>当从一个变量向另一个变量复制引用类型的值时，同样也会将存储在变量对象中的值复制一份放到为新变量分配的空间中。不同的是，这个值的副本实际上是一个<strong>指针</strong>，而这个指针指向存储在堆中的一个对象。</p><p>复制操作结束后，两个变量实际上将引用同一个对象，改变其中一个变量，就会影响另一个变量。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj1;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">obj1.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Nicholas&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj2.name); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//&quot;Nicholas&quot;</span></span></code></pre></div><p><img src="https://sinacloud.net/pro-js/copy-object.jpg" alt=""></p>`,9)]))}const E=i(p,[["render",e]]);export{c as __pageData,E as default};
