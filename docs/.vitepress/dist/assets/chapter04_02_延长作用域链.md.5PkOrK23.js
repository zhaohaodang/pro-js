import{_ as i,c as a,o as t,ag as n}from"./chunks/framework.DPDPlp3K.js";const E=JSON.parse('{"title":"延长作用域链","description":"","frontmatter":{},"headers":[],"relativePath":"chapter04/02/延长作用域链.md","filePath":"chapter04/02/延长作用域链.md","lastUpdated":null}'),l={name:"chapter04/02/延长作用域链.md"};function p(h,s,e,r,k,d){return t(),a("div",null,s[0]||(s[0]=[n(`<h1 id="延长作用域链" tabindex="-1">延长作用域链 <a class="header-anchor" href="#延长作用域链" aria-label="Permalink to &quot;延长作用域链&quot;">​</a></h1><p>执行环境的类型总共只有两种——全局和局部（函数），但还是有其他办法来延长作用域链。</p><p>当执行流进入下列任何一个语句时，作用域链就会得到加长：</p><ul><li>try-catch 语句的catch 块</li><li>with 语句</li></ul><p>对with 语句来说，会将指定的对象添加到作用域链中。</p><p>对catch 语句来说，会创建一个新的变量对象。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> buildUrl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> qs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;?debug=true&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (location) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> url </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> href </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> qs;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> url;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在此，with 语句接收的是location 对象，因此其变量对象中就<em>包含</em>了 location 对象的所有属性和方法，而这个变量对象被添加到了作用域链的前端。当在with 语句中引用变量href 时（实际引用的是location.href），可以在当前执行环境的变量对象中找到。当引用变量qs 时，引用的则是在buildUrl()中定义的那个变量，而该变量位于函数环境的变量对象中。至于with 语句内部，则定义了一个名为url 的变量，因而url 就成了函数执行环境的一部分，所以可以作为函数的值被返回。</p>`,8)]))}const o=i(l,[["render",p]]);export{E as __pageData,o as default};
