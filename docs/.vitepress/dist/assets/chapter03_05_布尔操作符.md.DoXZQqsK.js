import{_ as s,c as a,o as l,ag as e}from"./chunks/framework.DPDPlp3K.js";const u=JSON.parse('{"title":"布尔操作符","description":"","frontmatter":{},"headers":[],"relativePath":"chapter03/05/布尔操作符.md","filePath":"chapter03/05/布尔操作符.md","lastUpdated":null}'),t={name:"chapter03/05/布尔操作符.md"};function n(p,i,h,k,r,d){return l(),a("div",null,i[0]||(i[0]=[e(`<h1 id="布尔操作符" tabindex="-1">布尔操作符 <a class="header-anchor" href="#布尔操作符" aria-label="Permalink to &quot;布尔操作符&quot;">​</a></h1><p><strong><em>逻辑非</em></strong></p><p>无论数值是什么数据类型，这个操作符都会返回一个布尔值，遵循下列规则：</p><ul><li>如果操作数是一个对象，返回false</li><li>如果操作数是一个空字符串，返回true</li><li>如果操作数是一个非空字符串，返回false</li><li>如果操作数是数值0，返回true</li><li>如果操作数是任意非0 数值（包括Infinity），返回false</li><li>如果操作数是null或NaN或undefined，返回true</li></ul><blockquote><p>同时使用两个逻辑非操作符，实际上就会模拟Boolean()转型函数的行为</p></blockquote><p><strong><em>逻辑与</em></strong></p><p>逻辑与操作可以应用于任何类型的操作数，而不仅仅是布尔值。</p><p>在有一个操作数不是布尔值的情况下，逻辑与操作就不一定返回布尔值，逻辑与规则如下：</p><ul><li>如果第一个操作数是对象，则返回第二个操作数</li><li>如果第二个操作数是对象，则只有在第一个操作数的求值结果为true 的情况下才会返回该对象</li><li>如果两个操作数都是对象，则返回第二个操作数</li><li>如果有一个操作数是null，则返回null</li><li>如果有一个操作数是NaN，则返回NaN</li><li>如果有一个操作数是undefined，则返回undefined</li></ul><p>逻辑与操作属于短路操作，即如果第一个操作数能够决定结果，那么就不会再对第二个操作数求值</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> found </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> found </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> someUndefinedVariable; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 不会发生错误</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 会执行（&quot;false&quot;）</span></span></code></pre></div><blockquote><p>found为false，所以不必在乎someUndefinedVariable</p></blockquote><p>然而</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> found </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> found </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> someUndefinedVariable; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 这里会发生错误</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 这一行不会执行</span></span></code></pre></div><blockquote><p>found为true，仍需要进行判断someUndefinedVariable的数值，报错</p></blockquote><p><strong><em>逻辑或</em></strong></p><p>与逻辑与操作相似，如果有一个操作数不是布尔值，逻辑或也不一定返回布尔值</p><p>逻辑或规则：</p><ul><li>如果第一个操作数是对象，则返回第一个操作数</li><li>如果第一个操作数的求值结果为false，则返回第二个操作数</li><li>如果两个操作数都是对象，则返回第一个操作数</li><li>如果两个操作数都是null，则返回null</li><li>如果两个操作数都是NaN，则返回NaN</li><li>如果两个操作数都是undefined，则返回undefined</li></ul><blockquote><p>与逻辑与操作符相似，逻辑或操作符也是短路操作符</p></blockquote>`,20)]))}const c=s(t,[["render",n]]);export{u as __pageData,c as default};
