import{_ as s,c as t,o as a,ag as e}from"./chunks/framework.DPDPlp3K.js";const d=JSON.parse('{"title":"Object类型","description":"","frontmatter":{},"headers":[],"relativePath":"chapter03/04/Object类型.md","filePath":"chapter03/04/Object类型.md","lastUpdated":null}'),l={name:"chapter03/04/Object类型.md"};function n(r,i,p,h,o,c){return a(),t("div",null,i[0]||(i[0]=[e(`<h1 id="object类型" tabindex="-1">Object类型 <a class="header-anchor" href="#object类型" aria-label="Permalink to &quot;Object类型&quot;">​</a></h1><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> o </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> o </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 有效，但不推荐省略圆括号</span></span></code></pre></div><p>Object 的每个实例都具有下列属性和方法</p><ul><li>constructor：保存着用于创建当前对象的函数。对于前面的例子而言，构造函数（constructor）就是Object()</li><li>hasOwnProperty(propertyName)：用于检查给定的属性在当前对象实例中（而不是在实例 的原型中）是否存在。其中，作为参数的属性名（propertyName）必须以字符串形式指定（例如：o.hasOwnProperty(&quot;name&quot;)）</li><li>isPrototypeOf(object)：用于检查传入的对象是否是传入对象的原型（第5 章将讨论原型）</li><li>propertyIsEnumerable(propertyName)：用于检查给定的属性是否能够使用for-in 语句（本章后面将会讨论）来枚举。与hasOwnProperty()方法一样，作为参数的属性名必须以字符串形式指定</li><li>toLocaleString()：返回对象的字符串表示，该字符串与执行环境的地区对应</li><li>toString()：返回对象的字符串表示</li><li>valueOf()：返回对象的字符串、数值或布尔值表示。通常与toString()方法的返回值相同</li></ul>`,4)]))}const g=s(l,[["render",n]]);export{d as __pageData,g as default};
